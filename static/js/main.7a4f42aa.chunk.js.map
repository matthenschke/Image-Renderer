{"version":3,"sources":["components/Images.js","components/Form.js","components/Header.js","components/HelpText.js","App.js","serviceWorker.js","index.js"],"names":["Images","props","react_default","a","createElement","className","images","map","image","index","key","src","alt","Form","onSubmit","handleSubmit","type","name","onChange","handleChange","accept","required","Header","HelpText","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","files","setState","currentImage","URL","createObjectURL","preventDefault","concat","toConsumableArray","state","components_Header","components_HelpText","components_Form","components_Images","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAaeA,EAVA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBAChBJ,EAAMK,OAAOC,IAAI,SAACC,EAAOC,GAAR,OACfP,EAAAC,EAAAC,cAAA,OAAKM,IAAOD,EAAOJ,UAAY,QAAQM,IAAOH,EAAOI,IAAM,SCWvDC,EAhBF,SAAAZ,GACT,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACbH,EAAAC,EAAAC,cAAA,QAAMU,SAAWb,EAAMc,cACvBb,EAAAC,EAAAC,cAAA,SAAOY,KAAO,OACdC,KAAO,iBACPC,SAAYjB,EAAMkB,aAClBC,OAAS,wBACTC,UAAQ,IACRnB,EAAAC,EAAAC,cAAA,UAAQY,KAAO,UAAf,aCHOM,EANA,SAAArB,GACX,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAY,UAAhB,mBCIOkB,EANE,SAAAtB,GACb,OACIC,EAAAC,EAAAC,cAAA,KAAGC,UAAY,aAAf,yCC0COmB,qBAnCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFT,aAAe,SAAAa,GACTA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAM,IACnCT,EAAKU,SAAS,CAACC,aAAeC,IAAIC,gBAAgBN,EAAEC,OAAOC,MAAM,OAXvDT,EAgBdV,aAAe,SAAAiB,GACbA,EAAEO,iBACFd,EAAKU,SAAS,CAAC7B,OAAM,GAAAkC,OAAAd,OAAAe,EAAA,EAAAf,CAAOD,EAAKiB,MAAMpC,QAAlB,CAA0BmB,EAAKiB,MAAMN,kBAhB1DX,EAAKiB,MAAQ,CACXpC,OAAS,GACT8B,aAAe,MAJLX,wEAuBZ,IAAMnB,EAASsB,KAAKc,MAAMpC,OAC1B,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAM1B,aAAgBS,KAAKT,aAAcJ,aAAgBa,KAAKb,eAC9Db,EAAAC,EAAAC,cAAC0C,EAAD,CAAQxC,OAAUA,YA9BRyC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7a4f42aa.chunk.js","sourcesContent":["\nimport React from \"react\";\n\nconst Images = props => {\n    return (\n        <div className = \"image-container\">\n        {props.images.map((image, index) => \n           <img key = {index} className = \"image\" src = {image} alt = ''/>\n        )}\n        </div>\n    );\n}\n\nexport default Images;\n  ","import React from \"react\";\n\nconst Form = props =>{\n    return (\n    <div className = \"form\">\n        <form onSubmit ={props.handleSubmit}>\n        <input type = \"file\" \n        name = \"image-selector\"\n        onChange = {props.handleChange} \n        accept = \"image/png, image/jpeg\"\n        required />\n        <button type = \"submit\">Submit</button>\n        </form>\n        </div>\n    );\n}\n\n\nexport default Form;","import React from 'react';\n\nconst Header = props => {\n    return (\n        <h1 className = \"header\">Image Renderer</h1>\n    );  \n}\n\nexport default Header;","import React from 'react';\n\nconst HelpText = props => {\n    return (\n        <p className = \"help-text\">*Select a png or jpg file to display</p>\n    );  \n}\n\nexport default HelpText;","import React, { Component } from 'react';\n\n// components\nimport Images from \"./components/Images\";\nimport Form from \"./components/Form\";\nimport Header from \"./components/Header\";\nimport HelpText from \"./components/HelpText\";\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      images : [],\n      currentImage : null\n    }\n  }\n  \n  // event handlers\n  handleChange = e => {\n    if (e.target.files && e.target.files[0]){\n      this.setState({currentImage : URL.createObjectURL(e.target.files[0])});\n    }\n    \n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({images : [...this.state.images, this.state.currentImage]})\n  }\n\n\n  render() {\n    const images = this.state.images;\n    return (\n      <div className = \"app\">\n        <Header />\n        <HelpText />\n        <Form handleChange = {this.handleChange} handleSubmit = {this.handleSubmit} />\n        <Images images = {images}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}